# AppVeyor.com is a Continuous Integration service to build and run tests under
# Windows. This .yml file is based on scikit-learn and statsmodels' Appveyor CI
# setups, adapted for use with Skoot

# This image contains the most pre-installed software (including supposedly
# MinGW and Miniconda?...)
image:
- Visual Studio 2015

# No reason for us to restrict the number concurrent jobs
max_jobs: 100

cache:
  - '%LOCALAPPDATA%\pip\Cache'

environment:
  global:
    MINGW_32: C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32\bin
    MINGW_64: C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64\bin
    OPENBLAS_32: https://3f23b170c54c2533c070-1c8a9b3114517dc5fe17b7c3f8c63a43.ssl.cf2.rackcdn.com/openblas-5f998ef_gcc7_1_0_win32.zip
    OPENBLAS_64: https://3f23b170c54c2533c070-1c8a9b3114517dc5fe17b7c3f8c63a43.ssl.cf2.rackcdn.com/openblas-5f998ef_gcc7_1_0_win64.zip
    NUMPY_HEAD: https://github.com/numpy/numpy.git
    NUMPY_BRANCH: master
    APPVEYOR_SAVE_CACHE_ON_ERROR: false
    TEST_TIMEOUT: 1000
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script interpreter
    # See: http://stackoverflow.com/a/13751649/163740
    # CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\build_tools\\appveyor\\run_with_env.cmd"
  PYPI_USERNAME: tgsmith61591.gh
  PYPI_PASSWORD:
    secure: gbT4E95dOsFHbxOmXk4C3gkIiaqeg0MGgvlE4rmxD4U=

  matrix:
    - PYTHON: C:\Python27
      PYTHON_VERSION: 2.7
      PYTHON_ARCH: 32
      USE_PYTEST: true
      TEST_MODE: full

    - PYTHON: C:\Python27-x64
      PYTHON_VERSION: 2.7
      PYTHON_ARCH: 64
      USE_PYTEST: true
      TEST_MODE: full

    - PYTHON: C:\Python35
      PYTHON_VERSION: 3.5
      PYTHON_ARCH: 32
      USE_PYTEST: true
      TEST_MODE: full

    - PYTHON: C:\Python35-x64
      PYTHON_VERSION: 3.5
      PYTHON_ARCH: 64
      USE_PYTEST: true
      TEST_MODE: full

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"
  - "ECHO \"%APPVEYOR_SCHEDULED_BUILD%\""

  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          Write-Host "There are newer queued builds for this pull request, skipping build."
          Exit-AppveyorBuild
        }
  - ps: |
      If (($env:SKIP_NOTAG -eq "true") -and ($env:APPVEYOR_REPO_TAG -ne "true")) {
          Write-Host "Skipping build, not at a tag."
          Exit-AppveyorBuild
      }

install:
  - C:\cygwin\bin\du -hs "%LOCALAPPDATA%\pip\Cache"

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%

  # Check that we have the expected version and architecture for Python
  - python --version
  - >-
     %CMD_IN_ENV%
     python -c "import sys,platform,struct;
     print(sys.platform, platform.machine(), struct.calcsize('P') * 8, )"

  # Install the BLAS library
  #  - install "openblas.lib" to PYTHON\lib
  #  - install OpenBLAS.dll to MINGW\bin
  - ps: |
      $PYTHON_ARCH = $env:PYTHON_ARCH
      $PYTHON = $env:PYTHON
      If ($PYTHON_ARCH -eq 32) {
          $OPENBLAS = $env:OPENBLAS_32
      } Else {
          $OPENBLAS = $env:OPENBLAS_64
      }
      $clnt = new-object System.Net.WebClient
      $file = "$(New-TemporaryFile).zip"
      $tmpdir = New-TemporaryFile | %{ rm $_; mkdir $_ }
      $destination = "$PYTHON\lib\openblas.a"

      echo $file
      echo $tmpdir
      echo $OPENBLAS

      $clnt.DownloadFile($OPENBLAS,$file)
      Get-FileHash $file | Format-List

      Expand-Archive $file $tmpdir

      rm $tmpdir\$PYTHON_ARCH\lib\*.dll.a
      $lib = ls $tmpdir\$PYTHON_ARCH\lib\*.a | ForEach { ls $_ } | Select-Object -first 1
      echo $lib

      cp $lib $destination
      ls $destination

  # Upgrade to the latest pip.
  - "ECHO Upgrading PIP"
  - '%CMD_IN_ENV% python -m pip install -U pip'

  # Install the scipy test dependencies.
  - "ECHO Installing PRE-requirements"
  - '%CMD_IN_ENV% pip install -U --timeout 5 --retries 2 -r build_tools/appveyor/pre_numpy_requirements.txt'

  # Replace numpy distutils with a version that can build with msvc + mingw-gfortran
  - "ECHO Getting Numpy HEAD"
  - ps: |
      $NumpyDir = $((python -c 'import os; import numpy; print(os.path.dirname(numpy.__file__))') | Out-String).Trim()
      rm -r -Force "$NumpyDir\distutils"
      $tmpdir = New-TemporaryFile | %{ rm $_; mkdir $_ }

      echo $NumpyDir
      echo $env:NUMPY_HEAD
      echo $env:NUMPY_BRANCH
      git clone -q --depth=1 -b $env:NUMPY_BRANCH $env:NUMPY_HEAD $tmpdir
      mv $tmpdir\numpy\distutils $NumpyDir

  # NOW that we've updated our numpy dist we can install scikit, etc.
  - "ECHO Installing POST-requirements"
  - '%CMD_IN_ENV% pip install -U --timeout 5 --retries 2 -r build_tools/appveyor/post_numpy_requirements.txt'

build_script:
  - ps: |
      $PYTHON_ARCH = $env:PYTHON_ARCH
      If ($PYTHON_ARCH -eq 32) {
          $MINGW = $env:MINGW_32
      } Else {
          $MINGW = $env:MINGW_64
      }
      $env:Path += ";$MINGW"
      $env:NPY_NUM_BUILD_JOBS = "4"

      If ($env:USE_PYTEST -eq "true") {
        # python setup.py bdist_wheel bdist_wininst
        python setup.py bdist_wheel
        ls dist
        pip install --pre --no-index --find-links dist/ skoot
      } Else {
        mkdir dist
        pip wheel -v -v -v --wheel-dir=dist .

        # For each wheel that pip has placed in the "dist" directory
        # First, upload the wheel to the "artifacts" tab and then
        # install the wheel. If we have only built numpy (as is the case here),
        # then there will be one wheel to install.

        # This method is more representative of what will be distributed,
        # because it actually tests what the built wheels will be rather than
        # what 'setup.py install' will do and at it uploads the wheels so that
        # they can be inspected.

        ls dist -r | Foreach-Object {
            appveyor PushArtifact $_.FullName
            pip install $_.FullName
        }
      }

after_build:
  # Remove old or huge cache files to hopefully not exceed the 1GB cache limit.
  #
  # If the cache limit is reached, the cache will not be updated (of not even
  # created in the first run). So this is a trade of between keeping the cache
  # current and having a cache at all.
  # NB: This is done only `on_success` since the cache in uploaded only on
  # success anyway.
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -mtime +360 -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -size +10M -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -empty -delete

  # Show size of cache
  - C:\cygwin\bin\du -hs "%LOCALAPPDATA%\pip\Cache"

  # - ls %PYTHON%\lib\site-packages\
  # - ls %PYTHON%\lib\site-packages\skoot
  - ls %PYTHON%\lib\site-packages\skoot\__check_build
  - ls %PYTHON%\lib\site-packages\skoot\decomposition

  # Site-packages should already be on the path, but just to be safe...
  - "ECHO Old path: %PATH%"
  - SET PATH=%PYTHON%\lib\site-packages;%PATH%
  - "ECHO New path: %PATH%"

test_script:
  # - ECHO %TEST_MODE%
  # Scipy's args are giving us errors:
  # - python appveyor_runtests.py -n -m %TEST_MODE% -- -n6 --timeout=%TEST_TIMEOUT% --junitxml=%cd%\junit-results.xml -rfEX
  # - python appveyor_runtests.py -n -m %TEST_MODE%
  #
  # Change to a non-source folder to make sure we run the tests on the
  # installed library.
  - mkdir "../empty_folder"
  - "cd ../empty_folder"

  # Now maybe debug what's going on with inability to find DLLs...
  - >-
     %CMD_IN_ENV%
     python -c "import imp; print(imp.find_module('skoot'))"

  # Lots of bugs around Py_DEBUG flags, etc. See:
  # 1. https://bugzilla.mozilla.org/show_bug.cgi?id=1240993
  # 2. https://github.com/pypa/pip/pull/3075/commits
  # So let's try to get the variables to debug in the console. This is basically the
  # code that's running on the pip side.
  - >-
     %CMD_IN_ENV%
     python -c "import sys; from pip.pep425tags import get_config_var, get_flag, get_abbr_impl, get_impl_ver;
     soabi = str(get_config_var('SOABI')); print('SOABI = ' + soabi);
     impl = get_abbr_impl(); print('Impl = ' + impl);
     d = 'd' if get_flag('Py_DEBUG', lambda: hasattr(sys, 'gettotalrefcount'), warn=(impl == 'cp')) else '';
     m = 'm' if get_flag('WITH_PYMALLOC', lambda: impl == 'cp', warn=(impl == 'cp')) else '';
     u = 'u' if get_flag('Py_UNICODE_SIZE', lambda: sys.maxunicode == 0x10ffff, expected=4, warn=(impl == 'cp' and sys.version_info < (3, 3))) and sys.version_info < (3, 3) else '';
     print('Py_DEBUG (d) = ' + d);
     print('WITH_PYMALLOC (m) = ' + m);
     print('Py_UNICODE_SIZE (u) = ' + u);
     abi = impl + get_impl_ver() + d + m + u;
     print('ABI = ' + abi);"

  # And nowwww we test
  - pytest --showlocals --durations=20 --pyargs skoot

  # Move back to the project folder
  - "cd ../skoot"

after_test:
  # After the test, build the wheels (let travis handle the source build).
  - ECHO "Tests complete!"
  - set PATH=%BK_PATH%

artifacts:
  - path: dist\*

deploy_script:
  - echo "Starting artifact deployment"
  - set PATH=%BK_PATH%
  - ps: If ($env:APPVEYOR_REPO_TAG -eq "true") { Invoke-Expression "twine upload -u tgsmith61591.gh -p $env:PYPI_PASSWORD --skip-existing dist/*" } Else { write-output "Not on a tagged commit, won't deploy to pypi"}
  #- ps: If ($env:APPVEYOR_REPO_BRANCH -eq "develop") { Invoke-Expression "twine upload -u tgsmith61591.gh -p $env:PYPI_PASSWORD --repository-url https://test.pypi.org/legacy/ --skip-existing dist/*" } Else { write-output "Not on a development commit, won't deploy to pypitest"}
